/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.dr.sattlers.bar.infra.kafka.payload;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class OrderReceived extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3294233993528531985L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"OrderReceived\",\"namespace\":\"com.dr.sattlers.bar.infra.kafka.payload\",\"fields\":[{\"name\":\"tableId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"food\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"drinks\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<OrderReceived> ENCODER =
      new BinaryMessageEncoder<OrderReceived>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<OrderReceived> DECODER =
      new BinaryMessageDecoder<OrderReceived>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<OrderReceived> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<OrderReceived> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<OrderReceived> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<OrderReceived>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this OrderReceived to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a OrderReceived from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a OrderReceived instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static OrderReceived fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.String tableId;
   private java.lang.String food;
   private java.lang.String drinks;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public OrderReceived() {}

  /**
   * All-args constructor.
   * @param tableId The new value for tableId
   * @param food The new value for food
   * @param drinks The new value for drinks
   */
  public OrderReceived(java.lang.String tableId, java.lang.String food, java.lang.String drinks) {
    this.tableId = tableId;
    this.food = food;
    this.drinks = drinks;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return tableId;
    case 1: return food;
    case 2: return drinks;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: tableId = value$ != null ? value$.toString() : null; break;
    case 1: food = value$ != null ? value$.toString() : null; break;
    case 2: drinks = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'tableId' field.
   * @return The value of the 'tableId' field.
   */
  public java.lang.String getTableId() {
    return tableId;
  }


  /**
   * Sets the value of the 'tableId' field.
   * @param value the value to set.
   */
  public void setTableId(java.lang.String value) {
    this.tableId = value;
  }

  /**
   * Gets the value of the 'food' field.
   * @return The value of the 'food' field.
   */
  public java.lang.String getFood() {
    return food;
  }


  /**
   * Sets the value of the 'food' field.
   * @param value the value to set.
   */
  public void setFood(java.lang.String value) {
    this.food = value;
  }

  /**
   * Gets the value of the 'drinks' field.
   * @return The value of the 'drinks' field.
   */
  public java.lang.String getDrinks() {
    return drinks;
  }


  /**
   * Sets the value of the 'drinks' field.
   * @param value the value to set.
   */
  public void setDrinks(java.lang.String value) {
    this.drinks = value;
  }

  /**
   * Creates a new OrderReceived RecordBuilder.
   * @return A new OrderReceived RecordBuilder
   */
  public static com.dr.sattlers.bar.infra.kafka.payload.OrderReceived.Builder newBuilder() {
    return new com.dr.sattlers.bar.infra.kafka.payload.OrderReceived.Builder();
  }

  /**
   * Creates a new OrderReceived RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new OrderReceived RecordBuilder
   */
  public static com.dr.sattlers.bar.infra.kafka.payload.OrderReceived.Builder newBuilder(com.dr.sattlers.bar.infra.kafka.payload.OrderReceived.Builder other) {
    if (other == null) {
      return new com.dr.sattlers.bar.infra.kafka.payload.OrderReceived.Builder();
    } else {
      return new com.dr.sattlers.bar.infra.kafka.payload.OrderReceived.Builder(other);
    }
  }

  /**
   * Creates a new OrderReceived RecordBuilder by copying an existing OrderReceived instance.
   * @param other The existing instance to copy.
   * @return A new OrderReceived RecordBuilder
   */
  public static com.dr.sattlers.bar.infra.kafka.payload.OrderReceived.Builder newBuilder(com.dr.sattlers.bar.infra.kafka.payload.OrderReceived other) {
    if (other == null) {
      return new com.dr.sattlers.bar.infra.kafka.payload.OrderReceived.Builder();
    } else {
      return new com.dr.sattlers.bar.infra.kafka.payload.OrderReceived.Builder(other);
    }
  }

  /**
   * RecordBuilder for OrderReceived instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<OrderReceived>
    implements org.apache.avro.data.RecordBuilder<OrderReceived> {

    private java.lang.String tableId;
    private java.lang.String food;
    private java.lang.String drinks;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.dr.sattlers.bar.infra.kafka.payload.OrderReceived.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.tableId)) {
        this.tableId = data().deepCopy(fields()[0].schema(), other.tableId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.food)) {
        this.food = data().deepCopy(fields()[1].schema(), other.food);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.drinks)) {
        this.drinks = data().deepCopy(fields()[2].schema(), other.drinks);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing OrderReceived instance
     * @param other The existing instance to copy.
     */
    private Builder(com.dr.sattlers.bar.infra.kafka.payload.OrderReceived other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.tableId)) {
        this.tableId = data().deepCopy(fields()[0].schema(), other.tableId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.food)) {
        this.food = data().deepCopy(fields()[1].schema(), other.food);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.drinks)) {
        this.drinks = data().deepCopy(fields()[2].schema(), other.drinks);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'tableId' field.
      * @return The value.
      */
    public java.lang.String getTableId() {
      return tableId;
    }


    /**
      * Sets the value of the 'tableId' field.
      * @param value The value of 'tableId'.
      * @return This builder.
      */
    public com.dr.sattlers.bar.infra.kafka.payload.OrderReceived.Builder setTableId(java.lang.String value) {
      validate(fields()[0], value);
      this.tableId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'tableId' field has been set.
      * @return True if the 'tableId' field has been set, false otherwise.
      */
    public boolean hasTableId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'tableId' field.
      * @return This builder.
      */
    public com.dr.sattlers.bar.infra.kafka.payload.OrderReceived.Builder clearTableId() {
      tableId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'food' field.
      * @return The value.
      */
    public java.lang.String getFood() {
      return food;
    }


    /**
      * Sets the value of the 'food' field.
      * @param value The value of 'food'.
      * @return This builder.
      */
    public com.dr.sattlers.bar.infra.kafka.payload.OrderReceived.Builder setFood(java.lang.String value) {
      validate(fields()[1], value);
      this.food = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'food' field has been set.
      * @return True if the 'food' field has been set, false otherwise.
      */
    public boolean hasFood() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'food' field.
      * @return This builder.
      */
    public com.dr.sattlers.bar.infra.kafka.payload.OrderReceived.Builder clearFood() {
      food = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'drinks' field.
      * @return The value.
      */
    public java.lang.String getDrinks() {
      return drinks;
    }


    /**
      * Sets the value of the 'drinks' field.
      * @param value The value of 'drinks'.
      * @return This builder.
      */
    public com.dr.sattlers.bar.infra.kafka.payload.OrderReceived.Builder setDrinks(java.lang.String value) {
      validate(fields()[2], value);
      this.drinks = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'drinks' field has been set.
      * @return True if the 'drinks' field has been set, false otherwise.
      */
    public boolean hasDrinks() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'drinks' field.
      * @return This builder.
      */
    public com.dr.sattlers.bar.infra.kafka.payload.OrderReceived.Builder clearDrinks() {
      drinks = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public OrderReceived build() {
      try {
        OrderReceived record = new OrderReceived();
        record.tableId = fieldSetFlags()[0] ? this.tableId : (java.lang.String) defaultValue(fields()[0]);
        record.food = fieldSetFlags()[1] ? this.food : (java.lang.String) defaultValue(fields()[1]);
        record.drinks = fieldSetFlags()[2] ? this.drinks : (java.lang.String) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<OrderReceived>
    WRITER$ = (org.apache.avro.io.DatumWriter<OrderReceived>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<OrderReceived>
    READER$ = (org.apache.avro.io.DatumReader<OrderReceived>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.tableId);

    if (this.food == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.food);
    }

    if (this.drinks == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.drinks);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.tableId = in.readString();

      if (in.readIndex() != 1) {
        in.readNull();
        this.food = null;
      } else {
        this.food = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.drinks = null;
      } else {
        this.drinks = in.readString();
      }

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.tableId = in.readString();
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.food = null;
          } else {
            this.food = in.readString();
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.drinks = null;
          } else {
            this.drinks = in.readString();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










