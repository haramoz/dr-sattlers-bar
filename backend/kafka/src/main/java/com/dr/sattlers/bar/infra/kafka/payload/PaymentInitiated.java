/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.dr.sattlers.bar.infra.kafka.payload;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class PaymentInitiated extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3976312210973283812L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PaymentInitiated\",\"namespace\":\"com.dr.sattlers.bar.infra.kafka.payload\",\"fields\":[{\"name\":\"tableId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":\"long\"},{\"name\":\"paymentMethod\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<PaymentInitiated> ENCODER =
      new BinaryMessageEncoder<PaymentInitiated>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<PaymentInitiated> DECODER =
      new BinaryMessageDecoder<PaymentInitiated>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<PaymentInitiated> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<PaymentInitiated> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<PaymentInitiated> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<PaymentInitiated>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this PaymentInitiated to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a PaymentInitiated from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a PaymentInitiated instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static PaymentInitiated fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.String tableId;
   private long amount;
   private java.lang.String paymentMethod;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public PaymentInitiated() {}

  /**
   * All-args constructor.
   * @param tableId The new value for tableId
   * @param amount The new value for amount
   * @param paymentMethod The new value for paymentMethod
   */
  public PaymentInitiated(java.lang.String tableId, java.lang.Long amount, java.lang.String paymentMethod) {
    this.tableId = tableId;
    this.amount = amount;
    this.paymentMethod = paymentMethod;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return tableId;
    case 1: return amount;
    case 2: return paymentMethod;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: tableId = value$ != null ? value$.toString() : null; break;
    case 1: amount = (java.lang.Long)value$; break;
    case 2: paymentMethod = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'tableId' field.
   * @return The value of the 'tableId' field.
   */
  public java.lang.String getTableId() {
    return tableId;
  }


  /**
   * Sets the value of the 'tableId' field.
   * @param value the value to set.
   */
  public void setTableId(java.lang.String value) {
    this.tableId = value;
  }

  /**
   * Gets the value of the 'amount' field.
   * @return The value of the 'amount' field.
   */
  public long getAmount() {
    return amount;
  }


  /**
   * Sets the value of the 'amount' field.
   * @param value the value to set.
   */
  public void setAmount(long value) {
    this.amount = value;
  }

  /**
   * Gets the value of the 'paymentMethod' field.
   * @return The value of the 'paymentMethod' field.
   */
  public java.lang.String getPaymentMethod() {
    return paymentMethod;
  }


  /**
   * Sets the value of the 'paymentMethod' field.
   * @param value the value to set.
   */
  public void setPaymentMethod(java.lang.String value) {
    this.paymentMethod = value;
  }

  /**
   * Creates a new PaymentInitiated RecordBuilder.
   * @return A new PaymentInitiated RecordBuilder
   */
  public static com.dr.sattlers.bar.infra.kafka.payload.PaymentInitiated.Builder newBuilder() {
    return new com.dr.sattlers.bar.infra.kafka.payload.PaymentInitiated.Builder();
  }

  /**
   * Creates a new PaymentInitiated RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new PaymentInitiated RecordBuilder
   */
  public static com.dr.sattlers.bar.infra.kafka.payload.PaymentInitiated.Builder newBuilder(com.dr.sattlers.bar.infra.kafka.payload.PaymentInitiated.Builder other) {
    if (other == null) {
      return new com.dr.sattlers.bar.infra.kafka.payload.PaymentInitiated.Builder();
    } else {
      return new com.dr.sattlers.bar.infra.kafka.payload.PaymentInitiated.Builder(other);
    }
  }

  /**
   * Creates a new PaymentInitiated RecordBuilder by copying an existing PaymentInitiated instance.
   * @param other The existing instance to copy.
   * @return A new PaymentInitiated RecordBuilder
   */
  public static com.dr.sattlers.bar.infra.kafka.payload.PaymentInitiated.Builder newBuilder(com.dr.sattlers.bar.infra.kafka.payload.PaymentInitiated other) {
    if (other == null) {
      return new com.dr.sattlers.bar.infra.kafka.payload.PaymentInitiated.Builder();
    } else {
      return new com.dr.sattlers.bar.infra.kafka.payload.PaymentInitiated.Builder(other);
    }
  }

  /**
   * RecordBuilder for PaymentInitiated instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PaymentInitiated>
    implements org.apache.avro.data.RecordBuilder<PaymentInitiated> {

    private java.lang.String tableId;
    private long amount;
    private java.lang.String paymentMethod;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.dr.sattlers.bar.infra.kafka.payload.PaymentInitiated.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.tableId)) {
        this.tableId = data().deepCopy(fields()[0].schema(), other.tableId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.amount)) {
        this.amount = data().deepCopy(fields()[1].schema(), other.amount);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.paymentMethod)) {
        this.paymentMethod = data().deepCopy(fields()[2].schema(), other.paymentMethod);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing PaymentInitiated instance
     * @param other The existing instance to copy.
     */
    private Builder(com.dr.sattlers.bar.infra.kafka.payload.PaymentInitiated other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.tableId)) {
        this.tableId = data().deepCopy(fields()[0].schema(), other.tableId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.amount)) {
        this.amount = data().deepCopy(fields()[1].schema(), other.amount);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.paymentMethod)) {
        this.paymentMethod = data().deepCopy(fields()[2].schema(), other.paymentMethod);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'tableId' field.
      * @return The value.
      */
    public java.lang.String getTableId() {
      return tableId;
    }


    /**
      * Sets the value of the 'tableId' field.
      * @param value The value of 'tableId'.
      * @return This builder.
      */
    public com.dr.sattlers.bar.infra.kafka.payload.PaymentInitiated.Builder setTableId(java.lang.String value) {
      validate(fields()[0], value);
      this.tableId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'tableId' field has been set.
      * @return True if the 'tableId' field has been set, false otherwise.
      */
    public boolean hasTableId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'tableId' field.
      * @return This builder.
      */
    public com.dr.sattlers.bar.infra.kafka.payload.PaymentInitiated.Builder clearTableId() {
      tableId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'amount' field.
      * @return The value.
      */
    public long getAmount() {
      return amount;
    }


    /**
      * Sets the value of the 'amount' field.
      * @param value The value of 'amount'.
      * @return This builder.
      */
    public com.dr.sattlers.bar.infra.kafka.payload.PaymentInitiated.Builder setAmount(long value) {
      validate(fields()[1], value);
      this.amount = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'amount' field has been set.
      * @return True if the 'amount' field has been set, false otherwise.
      */
    public boolean hasAmount() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'amount' field.
      * @return This builder.
      */
    public com.dr.sattlers.bar.infra.kafka.payload.PaymentInitiated.Builder clearAmount() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'paymentMethod' field.
      * @return The value.
      */
    public java.lang.String getPaymentMethod() {
      return paymentMethod;
    }


    /**
      * Sets the value of the 'paymentMethod' field.
      * @param value The value of 'paymentMethod'.
      * @return This builder.
      */
    public com.dr.sattlers.bar.infra.kafka.payload.PaymentInitiated.Builder setPaymentMethod(java.lang.String value) {
      validate(fields()[2], value);
      this.paymentMethod = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'paymentMethod' field has been set.
      * @return True if the 'paymentMethod' field has been set, false otherwise.
      */
    public boolean hasPaymentMethod() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'paymentMethod' field.
      * @return This builder.
      */
    public com.dr.sattlers.bar.infra.kafka.payload.PaymentInitiated.Builder clearPaymentMethod() {
      paymentMethod = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public PaymentInitiated build() {
      try {
        PaymentInitiated record = new PaymentInitiated();
        record.tableId = fieldSetFlags()[0] ? this.tableId : (java.lang.String) defaultValue(fields()[0]);
        record.amount = fieldSetFlags()[1] ? this.amount : (java.lang.Long) defaultValue(fields()[1]);
        record.paymentMethod = fieldSetFlags()[2] ? this.paymentMethod : (java.lang.String) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<PaymentInitiated>
    WRITER$ = (org.apache.avro.io.DatumWriter<PaymentInitiated>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<PaymentInitiated>
    READER$ = (org.apache.avro.io.DatumReader<PaymentInitiated>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.tableId);

    out.writeLong(this.amount);

    out.writeString(this.paymentMethod);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.tableId = in.readString();

      this.amount = in.readLong();

      this.paymentMethod = in.readString();

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.tableId = in.readString();
          break;

        case 1:
          this.amount = in.readLong();
          break;

        case 2:
          this.paymentMethod = in.readString();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










