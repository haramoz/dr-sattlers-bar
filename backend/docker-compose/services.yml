version: '3.3'
services:
  waiter-service:
    image: ${GROUP_ID}/employee.waiter:${SERVICE_VERSION:-latest}
    ports:
      - "8888:8080"
    volumes:
      - "./docker-logs:/workspace/waiter-service/logs"
    depends_on:
      - kafka-broker-1
      - kafka-broker-2
      - kafka-broker-3
    environment:
      #- "JAVA_OPTS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:8080 -Xms128m -Xmx256m"
      - "LOGGING_LEVEL_COM_MICROSERVICES_DEMO=info"
      - "LOGGING_LEVEL_ROOT=info"
      - "KAFKA-CONFIG_TOPIC-NAME=order-delivered"
      - "KAFKA-CONFIG_TOPIC-NAMES-TO-CREATE_0=order-delivered"
      - "KAFKA-CONFIG_TOPIC-NAMES-TO-CREATE_1=order-received"
      - "KAFKA-CONFIG_BOOTSTRAP-SERVERS=kafka-broker-1:9092, kafka-broker-2:9092, kafka-broker-3:9092"
      - "KAFKA-CONFIG_SCHEMA-REGISTRY-URL=http://schema-registry:8081"
    networks:
      - ${GLOBAL_NETWORK:-services}
  kitchen-service:
    image: ${GROUP_ID}/employee.kitchen:${SERVICE_VERSION:-latest}
    ports:
      - "8890:8082"
    volumes:
      - "./docker-logs:/workspace/kitchen-service/logs"
    depends_on:
      - kafka-broker-1
      - kafka-broker-2
      - kafka-broker-3
    environment:
      #- "JAVA_OPTS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:8080 -Xms128m -Xmx256m"
      - "LOGGING_LEVEL_COM_MICROSERVICES_DEMO=info"
      - "LOGGING_LEVEL_ROOT=info"
      - "KAFKA-CONFIG_TOPIC-NAME=order-received"
      - "KAFKA-CONFIG_TOPIC-NAMES-TO-CREATE_0=order-received"
      - "KAFKA-CONFIG_BOOTSTRAP-SERVERS=kafka-broker-1:9092, kafka-broker-2:9092, kafka-broker-3:9092"
      - "KAFKA-CONFIG_SCHEMA-REGISTRY-URL=http://schema-registry:8081"
    networks:
      - ${GLOBAL_NETWORK:-services}
  postgres:
    image: postgres:10.5
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=mydb
    logging:
      options:
        max-size: 10m
        max-file: "3"
    ports:
      - '5438:5432'
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
      #copy the sql script to create tables
      - ./sql/create_tables.sql:/docker-entrypoint-initdb.d/create_tables.sql
      # copy the sql script to fill tables
      #- ./sql/fill_tables.sql:/docker-entrypoint-initdb.d/fill_tables.sql